{"ast":null,"code":"var _jsxFileName = \"D:\\\\__TRABAJOS\\\\PROGRA\\\\_forPortfolio_\\\\TimeManager\\\\src\\\\containers\\\\contactsPage\\\\ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contacts,\n    addContact\n  } = _ref;\n  const [name, setName] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [duplicate, setDuplicate] = useState(false);\n\n  /* Only add a new contact on form submission if it does not duplicate an existing contact’s name */\n  //Add contact and clear form\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!duplicate) {\n      addContact(name, phoneNumber, email);\n      setName(\"\");\n      setPhoneNumber(\"\");\n      setEmail(\"\");\n      set;\n      alert(\"Contact Added Successfully\");\n    }\n  };\n\n  // Check for contact name in the contacts array variable in props\n  useEffect(() => {\n    //Check if contact is already in contacts\n    const searcher = () => {\n      const result = contacts.find(contact => contact.name === name);\n      if (result !== undefined) {\n        return true;\n      } else {\n        return false;\n      }\n      ;\n    };\n    if (searcher()) {\n      setDuplicate(true);\n      alert(\"This contact already exists\");\n    } else {\n      setDuplicate(false);\n    }\n  }, [name, contacts, duplicate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: name,\n        setName: setName,\n        phone: phoneNumber,\n        setPhone: setPhoneNumber,\n        email: email,\n        setEmail: setEmail,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tiles: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"aUbMact7aXx2zzqKpm7JyL8slXY=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contacts","addContact","name","setName","phoneNumber","setPhoneNumber","email","setEmail","duplicate","setDuplicate","handleSubmit","e","preventDefault","set","alert","searcher","result","find","contact","undefined","children","fileName","_jsxFileName","lineNumber","columnNumber","phone","setPhone","tiles","_c","$RefreshReg$"],"sources":["D:/__TRABAJOS/PROGRA/_forPortfolio_/TimeManager/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({contacts, addContact}) => {\r\n\r\n const [name, setName] = useState(\"\");\r\n const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n const [email, setEmail] = useState(\"\");\r\n const [duplicate, setDuplicate]= useState(false);\r\n\r\n /* Only add a new contact on form submission if it does not duplicate an existing contact’s name */\r\n //Add contact and clear form\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!duplicate){\r\n      addContact(name, phoneNumber, email);\r\n      setName(\"\");\r\n      setPhoneNumber(\"\");\r\n      setEmail(\"\");\r\n      set\r\n      alert(\"Contact Added Successfully\");\r\n    }\r\n  };\r\n\r\n  // Check for contact name in the contacts array variable in props\r\n useEffect(() =>{\r\n  //Check if contact is already in contacts\r\n  const searcher = () =>{\r\n    const result = contacts.find(contact => contact.name === name);\r\n    if (result !== undefined){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    };\r\n  };\r\n  if (searcher()){\r\n    setDuplicate(true);\r\n    alert(\"This contact already exists\");\r\n  } else {\r\n    setDuplicate(false);\r\n  }\r\n    \r\n },[name, contacts, duplicate]);\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm\r\n        name={name}\r\n        setName={setName}\r\n        phone={phoneNumber}\r\n        setPhone={setPhoneNumber}\r\n        email={email}\r\n        setEmail={setEmail}\r\n        handleSubmit={handleSubmit}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList tiles={contacts}/>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}